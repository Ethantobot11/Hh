# This is a basic workflow to help you get started with Actions

name: Build


# Controls when the action will run.
on: 
  # Triggers the workflow on push or pull request events but only for the master branch

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  
  buildAndroid:
  #   # The type of runner that the job will run on
     runs-on: ubuntu-latest
     strategy:
       matrix:
         arch: [armv7, arm64]

     # Steps represent a sequence of tasks that will be executed as part of the job
     steps:
       # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
       - uses: actions/checkout@main
      
       - name: Retrieve Cache
         uses: actions/cache@v4
         with:
           path: |
             export/release/android/haxe
             export/release/android/obj
           key: ${{ runner.os }}-cache

       - uses: krdlab/setup-haxe@master
         with:
           haxe-version: 4.2.5
      
       - name: Setup Java JDK
         uses: actions/setup-java@main
         with:
            distribution: 'zulu'
            java-version: '11'

       - name: Setup Android NDK
         uses: nttld/setup-ndk@v1
         id: setup-ndk
         with:
            ndk-version: r21e
      
        # Runs a set of commands using the runners shell
       - name: Install Haxelib
         run: |
            haxelib setup ~/haxelib
            haxelib install hxcpp > /dev/null --quiet
            haxelib install lime 7.9.0 --quiet
            haxelib install openfl --quiet
            haxelib --never install flixel 5.2.2 --quiet
            haxelib install flixel-tools 1.5.1 --quiet
            haxelib install flixel-ui --quiet
            haxelib install flixel-addons 3.0.2 --quiet
            haxelib install format --quiet
            haxelib install hxcpp > /dev/null --quiet
            haxelib install hmm --quiet
            haxelib run hmm install --quiet
            haxelib remove hxcpp --quiet
            haxelib install hxcpp --quiet
            haxelib install tjson --quiet 
            haxelib install hxjsonast --quiet
            haxelib git SScript https://github.com/Ethantobot11/SScript-0.4.1 --quiet
            haxelib remove SScript || true --quiet
            haxelib install SScript-4,0,1.zip --quiet
            haxelib git hxCodec https://github.com/SPLCoding/hxCodec-but-it-works-xd.git --quiet
            haxelib git discord_rpc https://github.com/Aidan63/linc_discord-rpc --quiet
            haxelib git linc_luajit https://github.com/Sirox228/linc_luajit --quiet
            haxelib git extension-androidtools https://github.com/MaysLastPlay77/extension-androidtools --quiet
            haxelib install hxcpp-debug-server
            haxelib git androiddialogs https://github.com/beihu235/AndroidDialogs --quiet
            haxelib git devicelanguage https://github.com/beihu235/devicelanguage --quiet
            haxelib run lime config ANDROID_SDK $ANDROID_HOME
            haxelib run lime config ANDROID_NDK_ROOT ${{steps.setup-ndk.outputs.ndk-path}}
            haxelib run lime config JAVA_HOME $JAVA_HOME
            haxelib run lime config ANDROID_SETUP true
            haxelib set lime 7.9.0
            haxelib set flixel 5.2.2
            haxelib set flixel-addons 3.0.2
            haxelib set hxcpp 4.2.1
            haxelib set SScript 4.0.1
            haxelib list
        
       - name: Create Version Tag
         run: echo "${{github.run_id}}" > VERSION
       - name: clean android
         run: haxelib run lime clean -clean android
       - name: Compile
         continue-on-error: true
         run: haxelib run lime build Project.xml android -D android -DSScript_4_0_1 -final -clean --app-version="4.0.0-${{ github.run_id}}" -${{ matrix.arch }}  
       - name: Publish Artifact
         uses: actions/upload-artifact@v4
         with:
           name: androidBuild
           path: 'export/release/android/bin/app/build/outputs/apk'
           smh: code signing shit
  buildiOS:
     runs-on: macos-latest

     steps:
  #     # Checks-o your repository under $GITHUB_WORKSPACE, so your job can access it
        - uses: actions/checkout@main

        - name: Retrieve Cache
          uses: actions/cache@v4
          with:
            path: |
              export/release/ios/haxe
              export/release/ios/obj
            key: ${{ runner.os }}-cache

        - uses: krdlab/setup-haxe@master
          with:
            haxe-version: 4.2.5     
        # Runs a set of commands using the runners shell
        - name: Install Haxelib
          run: |
            haxelib setup ~/haxelib
            haxelib install hxcpp > /dev/null --quiet
            haxelib install lime 7.9.0 --quiet
            haxelib install openfl --quiet
            haxelib --never install flixel 5.2.2 --quiet
            haxelib install flixel-tools 1.5.1 --quiet
            haxelib install flixel-ui --quiet
            haxelib install flixel-addons 3.0.2 --quiet
            haxelib install format --quiet
            haxelib install hxcpp > /dev/null --quiet
            haxelib install hmm --quiet
            haxelib run hmm install --quiet
            haxelib remove hxcpp --quiet
            haxelib install hxcpp --quiet
            haxelib install tjson --quiet 
            haxelib install hxjsonast --quiet
            haxelib git SScript https://github.com/Ethantobot11/SScript-0.4.1 --quiet
            haxelib remove SScript || true --quiet
            haxelib install SScript-4,0,1.zip --quiet
            haxelib git hxCodec https://github.com/SPLCoding/hxCodec-but-it-works-xd.git --quiet
            haxelib git discord_rpc https://github.com/Aidan63/linc_discord-rpc --quiet
            haxelib git linc_luajit https://github.com/Sirox228/linc_luajit --quiet
            haxelib git extension-androidtools https://github.com/MaysLastPlay77/extension-androidtools --quiet
            haxelib install hxcpp-debug-server
            haxelib git androiddialogs https://github.com/beihu235/AndroidDialogs --quiet
            haxelib git devicelanguage https://github.com/beihu235/devicelanguage --quiet
            haxelib set lime 7.9.0
            haxelib set flixel 5.2.2
            haxelib set flixel-addons 3.0.2
            haxelib set hxcpp 4.2.1
            haxelib set SScript 4.0.1
            haxelib list
              
        - name: Create Version Tag
          run: echo "${{github.run_id}}" > VERSION
        - name: clean iOS
          run: haxelib run lime clean ios -clean
        - name: hxcpp rebuild ig
          run: haxelib run lime rebuild hxcpp
        - name: Compile
          continue-on-error: true
          run: haxelib run lime build ios -final -nosign -D -clean -Dsource-header -Dforce_libcpp -DHXCPP_M64 -DSScript_4_0_1 --app-version="4.0.0-${{ github.run_id}}" -D ios -D SScript_4_0_1
        - name: Make IPA
           runner.os == 'macOS'
          run: |
            brew install ldid
            cd export/release/ios/build/Release-iphoneos/PsychEngine.app
            ldid -S../../../PsychEngine/PsychEngine.entitlements PsychEngine
            cd ..
            mkdir Payload
            mv PsychEngine.app Payload
            zip -r PsychEngine.ipa Payload
        - name: Publish Artifact
          uses: actions/upload-artifact@v4
          with:
            name: iOSBuild
            path: "export/release/ios/build/Release-iphoneos/PsychEngine.ipa"
  release:
    if: github.ref_type == 'tag'
    needs:
      - buildAndroid
      - buildiOS
      
    runs-on: ubuntu-latest

    steps:
    - name: Create Draft Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        release_name: v${{ github.ref_name }}
        draft: false
        prerelease: false

    - name: Download all workflow run artifacts
      uses: actions/download-artifact@v4

    - name: Zip artifacts
      run: |
        zip -r androidBuild androidBuild/
        zip -r /home/runner/PsychEngine-iOS.zip ${{ github.workspace }}/PsychEngine.ipa


    - name: Upload Android build to the release
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: androidBuild.zip
        asset_name: androidBuild.zip
        asset_content_type: application/zip

    - name: Upload iOS build to the release
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: iOSBuild.zip
        asset_name: iOSBuild.zip
        asset_content_type: application/zip
